#!/bin/bash

set -u

DIR=$(dirname `readlink -f $0`)
TERMUX_BLD_DIR="$DIR/../../termux-packages"
DEBS_DIR="$DIR/../debs"
ARCH=all
HOST_BUILD="/home/builder/.termux-build/swi-prolog/host-build"

if [ x"$1" == x"-u" ]; then
   FORCE="-f"
   (  cd "$TERMUX_BLD_DIR/packages/swi-prolog" && \
      ln -sf unstable-build.sh ./build.sh
   )
   SWIPL_SRC=local
   BANNER="
                            ************************
                                     Unstable
                            ************************"
else
   (  cd "$TERMUX_BLD_DIR/packages/swi-prolog" && \
      ln -sf release-build.sh ./build.sh
   )
   BANNER="
                            ************************
                                     Release
                            ************************"
fi

echo "$BANNER"

if [ x"$1" == x"-f" ]; then
   FORCE="-f"
fi

if [ ! -d "$TERMUX_BLD_DIR" ]; then
   echo "$TERMUX_BLD_DIR not found."
   echo
   echo "termux-packages repository doesn\'t exist, please run:"
   echo "   git clone https://github.com/erlanger/termux-packages"
   echo "in the parent directory of this repository."
fi
   
                        ######################
                        #   Build new debs   #
                        ######################
BUILD_CMD="env SWIPL_SRC=${SWIPL_SRC=\"\"} ./build-package.sh -a $ARCH $FORCE swi-prolog"
echo "$TERMUX_BLD_DIR/scripts/run-docker.sh"  $BUILD_CMD
#"$TERMUX_BLD_DIR/scripts/run-docker.sh"  $BUILD_CMD


                     ##############################
                     #  Move debs to release repo #
                     ##############################
LAST_BUILT_DEBS=$(ls -rt1 ${TERMUX_BLD_DIR}/debs/swi-prolog*|tail -4)

# Copy built debs to swipl-termux debs dir
if [ -n "$LAST_BUILT_DEBS" ]; then
   for deb in $LAST_BUILT_DEBS; do
      cp "$deb" "$DEBS_DIR"
   done
else
   echo "Error: No debs built!"
   exit 1
fi

# Copy files to swi-prolog_latest_<arch>.deb or ...unstable_<arch>.deb
if [ x${SWIPL_SRC=} = x"master" ]  || \
   [ x${SWIPL_SRC=} = x"local" ]; then        #use local files
   DOWNLOADABLE_PREFIX="swi-prolog_unstable"
else
   DOWNLOADABLE_PREFIX="swi-prolog_latest"
fi

cd "$DEBS_DIR"
for deb in $LAST_BUILT_DEBS; do
   if [[ $deb == *aarch64.deb ]]; then
      cp -f "$deb" "${DOWNLOADABLE_PREFIX}_aarch64.deb"
   elif [[ $deb == *arm.deb ]]; then
      cp -f "$deb" "${DOWNLOADABLE_PREFIX}_arm.deb"
   elif [[ $deb == *i686.deb ]]; then
      cp -f "$deb" "${DOWNLOADABLE_PREFIX}_i686.deb"
   elif [[ $deb == *x86_64.deb ]]; then
      cp -f "$deb" "${DOWNLOADABLE_PREFIX}_x86_64.deb"
   fi
done
