#!/bin/bash

echo this script is obsolete, just build manually as explained in the README.
exit 1
set -u

DIR=$(dirname `readlink -f $0`)
TERMUX_BLD_DIR="$DIR/../../termux-packages"
DEBS_DIR="$DIR/../debs"
HOST_BUILD="/home/builder/.termux-build/swi-prolog/host-build"

#Default flags/opts
BUILD=yes
ARCH=all
STABLE=yes
FORCE="-f"

                        ########################
                        #   Helper functions   #
                        ########################
link_to_release() {
   ln -sf release-build.sh ./build.sh
}

link_to_unstable() {
   ln -sf unstable-build.sh ./build.sh
}

usage() {
   cat <<EOD
   Build swi-prolog deb files for termux.

   Usage: update-debs -a <arch> -[nfurs]
      -n    dry run, dont' build
      -u    unstable build from local sources
      -s    stable build from last released version (also -r)
      -f    force build even if deb was already built
      -h    show this help
EOD
exit 4
}
                        ########################
                        #   Command line opts  #
                        ########################

while getopts :a:hnfurs option
do
   case "$option" in
      u)
         STABLE=no
         ;;
      s|r)
         STABLE=yes
         ;;
      a)
         case $OPTARG in
            arm|aarch64|i686|x86_64|all)
               ARCH=$OPTARG
               ;;
            *)
               echo "Architecture can only be arm, aarch64, i686, x86_64 or all (default)"
               exit 2
               ;;
         esac
         ;;
      f)
         FORCE="-f"
         ;;
      n) # Dry run
         BUILD=no
         ;;
      h)
         usage
         ;;
   esac
done

                        ######################
                        #   Setup stable or  #
                        #   unstable build   #
                        ######################

if [[ x"$STABLE" = x"no" ]]; then
   FORCE="-f"
   (  cd "$TERMUX_BLD_DIR/packages/swi-prolog" && \
      link_to_unstable
   )
   SWIPL_SRC=local
   BANNER="
                            ************************
                                     Unstable
                                     Arch: $ARCH
                            ************************"
elif [ x"$STABLE" = x"yes" ]; then
   (  cd "$TERMUX_BLD_DIR/packages/swi-prolog" && \
      link_to_release
   )
   BANNER="
                            ************************
                                     Release
                                     Arch: $ARCH
                            ************************"
fi

echo "$BANNER"

if [[ x"$BUILD" != x"yes" ]]; then
   echo "--> Not building, just copying debs"
fi

if [ ! -d "$TERMUX_BLD_DIR" ]; then
   echo "$TERMUX_BLD_DIR not found."
   echo
   echo "termux-packages repository doesn\'t exist, please run:"
   echo "   git clone https://github.com/erlanger/termux-packages"
   echo "in the parent directory of this repository."
   exit 3
fi
   
                        ######################
                        #   Build new debs   #
                        ######################
BUILD_CMD="env SWIPL_SRC=${SWIPL_SRC=\"\"} ./build-package.sh -a $ARCH $FORCE swi-prolog"

if [[ x"$BUILD" = x"yes" ]]; then
   echo "$TERMUX_BLD_DIR/scripts/run-docker.sh"  $BUILD_CMD
   "$TERMUX_BLD_DIR/scripts/run-docker.sh"  $BUILD_CMD
fi


                     ##############################
                     #  Move debs to release repo #
                     ##############################
LAST_BUILT_DEBS=$(ls -rt1 ${TERMUX_BLD_DIR}/debs/swi-prolog*|tail -4)

# Copy built debs to swipl-termux debs dir
if [ -n "$LAST_BUILT_DEBS" ]; then
   for deb in $LAST_BUILT_DEBS; do
      cp -a "$deb" "$DEBS_DIR"
   done
else
   echo "Error: No debs built!"
   exit 1
fi

# Copy files to swi-prolog_latest_<arch>.deb or ...unstable_<arch>.deb
if [ x${SWIPL_SRC=} = x"master" ]  || \
   [ x${SWIPL_SRC=} = x"local" ]; then        #use local files
   DOWNLOADABLE_PREFIX="swi-prolog_unstable"
else
   DOWNLOADABLE_PREFIX="swi-prolog_latest"
fi

cd "$DEBS_DIR"
for deb in $LAST_BUILT_DEBS; do
   if [[ $deb == *aarch64.deb ]]; then
      cp -f "$deb" "${DOWNLOADABLE_PREFIX}_aarch64.deb"
   elif [[ $deb == *arm.deb ]]; then
      cp -f "$deb" "${DOWNLOADABLE_PREFIX}_arm.deb"
   elif [[ $deb == *i686.deb ]]; then
      cp -f "$deb" "${DOWNLOADABLE_PREFIX}_i686.deb"
   elif [[ $deb == *x86_64.deb ]]; then
      cp -f "$deb" "${DOWNLOADABLE_PREFIX}_x86_64.deb"
   fi
done
